---
- name: Reserve available IP in Infoblox
  hosts: localhost
  connection: local
  gather_facts: no

  vars_files:
    - credentials.yml

  vars:
    # Runtime parameters - must be passed via extra-vars
    reservation_name: "{{ name }}"
    ip_to_reserve: "{{ available_ip }}"
    reservation_comment: "{{ comment | default('Reserved via Ansible') }}"

  tasks:
    - name: "Validate required runtime parameters"
      fail:
        msg: "Required parameters missing. Pass: -e 'name=ReservationName available_ip=10.50.1.4'"
      when: >
        name is not defined or name == "" or
        available_ip is not defined or available_ip == ""
    - name: Encode credentials
      set_fact:
        ipam_auth_header: "Basic {{ (infoblox_username + ':' + infoblox_password) | b64encode }}"

    - name: Reserve IP from selected network (Infoblox)
      uri:
        url: "{{ infoblox_api_url }}/fixedaddress"
        method: POST
        headers:
          Authorization: "{{ ipam_auth_header }}"
          Content-Type: "application/json"
        body_format: json
        body: 
          name: "{{ reservation_name }}"
          ipv4addr: "{{ ip_to_reserve }}"
          comment: "{{ reservation_comment }}"
          match_client: "RESERVED"
        validate_certs: false
        return_content: true
        timeout: 30
      register: ip_response
      failed_when: ip_response.status != 201

    - name: "Show reservation details"
      debug:
        msg: "âœ… Reserved IP {{ ip_to_reserve }} with name '{{ reservation_name }}'"

    - name: "Standardized output"
      set_fact:
        workflow_results:
          ip_reservation:
            name: "{{ reservation_name }}"
            reserved_ip: "{{ ip_to_reserve }}"
            comment: "{{ reservation_comment }}"
            reservation_ref: "{{ ip_response.json if ip_response.json is string else ip_response.json | string }}"
            data: "{{ ip_response }}"
            job_type: "reserve_available_ip"
            status: "success"

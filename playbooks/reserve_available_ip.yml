---
- name: Reserve available IP in Infoblox
  hosts: localhost
  connection: local
  gather_facts: no

  vars_files:
    - credentials.yml

  vars:
    # Runtime parameters - can be passed via -e or AWX or chained from fetch_available_ip.yml
    reservation_name: "{{ ip_reservation_name | steps.step5.available_ips.network | network_id | default('auto-reserved-ip') }}"
    ip_address: "{{ ip_address_to_reserve | steps.step5.available_ips.primary_ip | workflow_results.available_ips.primary_ip | available_ip | default('') }}"
    comment: "{{ reservation_comment | default('Reserved via Ansible automation') }}"
    match_client: "{{ match_client_type | default('RESERVED') }}"
    api_url: "{{ infoblox_api_url | default('') }}"
    api_timeout: "{{ infoblox_timeout | default(30) }}"

  tasks:
    - name: Validate required parameters
      fail:
        msg: "Missing required parameter: {{ item }}"
      when: vars[item] is not defined or vars[item] == ''
      loop:
        - reservation_name
        - ip_address
        - api_url

    - name: Validate Infoblox credentials
      fail:
        msg: "Missing Infoblox credentials: {{ item }}"
      when: vars[item] is not defined or vars[item] == ''
      loop:
        - infoblox_username
        - infoblox_password

    - name: Encode credentials
      set_fact:
        ipam_auth_header: "Basic {{ (infoblox_username + ':' + infoblox_password) | b64encode }}"

    - name: Reserve IP address in Infoblox
      uri:
        url: "{{ infoblox_api_url }}/fixedaddress"
        method: POST
        headers:
          Authorization: "{{ ipam_auth_header }}"
          Content-Type: "application/json"
        body_format: json
        body: 
          name: "{{ reservation_name }}"
          ipv4addr: "{{ ip_address }}"
          comment: "{{ comment }} - {{ ansible_date_time.iso8601 }}"
          match_client: "RESERVED"
        validate_certs: false
        return_content: true
        timeout: 30
      register: ip_response
      failed_when: ip_response.status != 201
      retries: 3
      delay: 2

    - name: Set standard output
      set_fact:
        # Legacy compatibility
        ip_reservation_result: "{{ ip_response }}"
        # Standard output structure
        workflow_results:
          ip_reservation:
            name: "{{ reservation_name }}"
            ip_address: "{{ ip_address }}"
            comment: "{{ comment }}"
            reservation_ref: "{{ ip_response.json }}"
            status_code: "{{ ip_response.status }}"
            job_type: "reserve_ip"
            status: "success"
            timestamp: "{{ ansible_date_time.iso8601 }}"

    - name: Display results
      debug:
        msg: "Successfully reserved IP {{ ip_address }} with name '{{ reservation_name }}' in Infoblox"
